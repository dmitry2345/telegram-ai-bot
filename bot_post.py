```python
import os
import datetime
import logging
import requests
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    JobQueue,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s ‚Äî %(levelname)s ‚Äî %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
HF_API_KEY = os.getenv("HF_API_KEY")
HF_MODEL = "EleutherAI/gpt-j-6B"
HF_URL = f"https://api-inference.huggingface.co/models/{HF_MODEL}"
HEADERS = {"Authorization": f"Bearer {HF_API_KEY}"}

async def start_command(update: ContextTypes.DEFAULT_TYPE, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –ø—É–±–ª–∏–∫—É–µ—Ç —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –≤ –∫–∞–Ω–∞–ª.\n"
        "‚ÑπÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/now ‚Äî —Å—Ä–∞–∑—É –ø—Ä–∏—Å–ª–∞—Ç—å —Å–≤–µ–∂–∏–π –ø–æ—Å—Ç\n"
    )

async def now_command(update: ContextTypes.DEFAULT_TYPE, context: ContextTypes.DEFAULT_TYPE):
    try:
        text = generate_text_for_today()
        await context.bot.send_message(
            chat_id=TELEGRAM_CHAT_ID,
            text=text,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=False
        )
        await update.message.reply_text("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞–ª –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª!")
    except Exception as e:
        logger.error(f"Error in now_command: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")

async def scheduled_post(context: ContextTypes.DEFAULT_TYPE):
    try:
        text = generate_text_for_today()
        await context.bot.send_message(
            chat_id=TELEGRAM_CHAT_ID,
            text=text,
            parse_mode=ParseMode.HTML,
            disable_web_page_preview=False
        )
    except Exception as e:
        logger.error(f"Error in scheduled_post: {e}")


def generate_text_for_today() -> str:
    today = datetime.date.today().strftime("%d.%m.%Y")
    prompt = f"–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∑–∞ {today}:"
    payload = {"inputs": prompt, "parameters": {"max_new_tokens": 200}}
    response = requests.post(HF_URL, headers=HEADERS, json=payload, timeout=60)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –æ—Ç–≤–µ—Ç–∞
    if response.status_code != 200:
        raise Exception(f"HF API status {response.status_code}: {response.text}")
    data = response.json()
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –≤ –æ—Ç–≤–µ—Ç–µ
    if isinstance(data, dict) and data.get("error"):
        raise Exception(f"HF API error: {data['error']}")
    if not isinstance(data, list) or not data:
        raise Exception(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ HF: {data}")
    body = data[0].get("generated_text", "").strip()
    if not body:
        raise Exception("HF –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç")
    # –í—Å—Ç–∞–≤–ª—è–µ–º affiliate‚Äë—Å—Å—ã–ª–∫—É
    affiliate = "https://www.amazon.com/dp/B00EXAMPLE/?tag=yourID-20"
    return (
        f"<b>–ù–æ–≤–æ—Å—Ç–∏ {today}</b>\n\n"
        f"{body}\n\n"
        f"<a href=\"{affiliate}\">–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π —Ç–æ–≤–∞—Ä</a>"
    )


def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("now", now_command))
    jq: JobQueue = app.job_queue
    jq.run_repeating(scheduled_post, interval=3600, first=10)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è...")
    app.run_polling()

if __name__ == "__main__":
    main()
```
